/* OpenCV for Processing 0.5.2 by Greg Borenstein  
   Computer vision with OpenCV: Face Detection example
   Install the library using Sketch > Import Library... > Add Library...
*/

/* Waterfall particles Michael Pinn https://www.openprocessing.org/sketch/165816*/ 
  ArrayList waterfall = new ArrayList();
PVector gravity = new PVector(0.02, 0.02);
 
import gab.opencv.*;
import processing.video.*;
import java.awt.*;

Capture video;
OpenCV opencv;

void setup() {
  size(640, 360);
  video = new Capture(this, 640, 360);
  opencv = new OpenCV(this, 640, 360);
  //opencv.loadCascade(OpenCV.CASCADE_FRONTALFACE);  

  video.start();
}

void draw() {
  // scale(2);
  opencv.loadImage(video);

  image(video, 0, 0 );
PVector loc = opencv.max();
  
  //stroke(255, 0, 0);
  noStroke(); 
  fill (78, 119, 186);
  ellipse(loc.x, loc.y, 10, 10);
//waterfall 
for(int i = 0; i < waterfall.size(); i++){
    Drop d = (Drop) waterfall.get(i);
    d.draw();
    d.applyForce(gravity);
   /* if(d.loc.y > d.stop){
      
      d.loc = new PVector(50, 50);
     // d.vel = new PVector(sin(radians(random(-90, 90)))/5, 0);
    }*/
  }
  
    if(waterfall.size() < 2000){
    waterfall.add(new Drop(loc));
  }
   println(waterfall.size());
  }
 



void captureEvent(Capture c) {
  c.read();
}


class Drop {
  PVector loc;
  PVector vel;
  PVector acc;
  float stop;
  float d = random(1, 15);
   
  Drop(PVector loc){
    this.loc = loc;
   // stop = height-random(50, 100);
    vel = new PVector(sin(radians(random(-200, 200)))/9, -1);
    acc = new PVector(3, 3);
    //normally 0,0
  }
   
  void draw(){
    
    vel.add(acc);
    loc.add(vel);
    acc.mult(0);
    fill (random(255), random(255), random(255), random(255));
    ellipse(loc.x, loc.y, d, d);
    rect(loc.x-10, loc.y-10, 4,4); 
    
  }
   
  void applyForce(PVector force){
    PVector f = PVector.div(force, 1.5-d/5);
    acc.add(f);
  }
}
